keyword___ENCODING__="__ENCODING__"
keyword___FILE__="__FILE__"
keyword___LINE__="__LINE__"
keyword_BEGIN="BEGIN"
keyword_END="END"
keyword_alias="alias"
keyword_and="and"
keyword_begin="begin"
keyword_break="break"
keyword_case="case"
keyword_class="class"
keyword_def="def"
keyword_do="do"
keyword_else="else"
keyword_elsif="elsif"
keyword_end="end"
keyword_ensure="ensure"
keyword_false="false"
keyword_for="for"
keyword_if="if"
keyword_in="in"
keyword_module="module"
keyword_next="next"
keyword_nil="nil"
keyword_not="not"
keyword_or="or"
keyword_redo="redo"
keyword_rescue="rescue"
keyword_retry="retry"
keyword_return="return"
keyword_self="self"
keyword_super="super"
keyword_then="then"
keyword_true="true"
keyword_undef="undef"
keyword_unless="unless"
keyword_until="until"
keyword_when="when"
keyword_while="while"
keyword_yield="yield"

operator_a=" !"
operator_b=" ~"
operator_c=" +"
operator_d=" -"
operator_e=" []"
operator_f=" []="
operator_g=" *"
operator_h=" /"
operator_i=" %"
operator_j=" +-"
operator_k=" >>"
operator_l=" <<"
operator_m=" &"
operator_n=" ^"
operator_o=" |"
operator_p=" <="
operator_q=" <>"
operator_r=" >="
operator_s=" <=>"
operator_t=" =="
operator_u=" ==="
operator_v=" !="
operator_w=" =~"
operator_x=" !~"
operator_y=" &&"
operator_z=" ||"
operator_aa=" .."
operator_ab=" ..."
operator_ac=" ?"
operator_ad=" :"
operator_ae=" ="
operator_af=" %="
operator_ag=" /="
operator_ah=" -="
operator_ai=" +="
operator_aj=" |="
operator_ak=" &="
operator_al=" >>="
operator_am=" <<="
operator_an=" *="
operator_ao=" &&="
operator_ap=" ||="
operator_aq=" **="
operator_ar=" ^="
operator_as=" not"
operator_at=" or"
operator_au=" and"
operator_av=" if"
operator_aw=" unless"
operator_ax=" while"
operator_ay=" until"
operator_az=" begin"
operator_ba=" end"

grammar_receiver="."
grammar_namespace="::"
grammar_savenavigator="&."
grammar_blockarg="|a,b|"
grammar_blocklocal="|a;b|"
snippet_hasharg=":a => 1"
snippet_hasharg2="a: 1"

literal_heredoc="<<-HERE"
literal_heredoc_end=" HERE"
literal_hash="{a:1,b:2}"
literal_proc="->(v) { 1 + v }"
literal_arr_sym="%i(a b)"
literal_str="%q(one two)"
literal_symbol="%s(one)"
literal_arr_str="%w(one two)"

global_bang="$!"
global_backtrace="$@"
global_match_str="$&"
global_match_str_left="$`"
global_match_str_right="$'"
global_match_highest="$+"
global_match_one="$1"
global_match_two="$2"
global_match_last="$~"
global_flag_caseinsen="$="
global_irs="$/"
global_ors="$\\"
global_ofs="$,"
global_split_separator="$;"
global_stdin="$<"
global_stdout="$>"
global_last_gets="$_"
global_self="$0"
global_argv="$*"
global_pid="$$"
global_last_status="$?"
global_load_path="$:"
global_loaded="$\""

const_true="TRUE"
const_false="FALSE"
const_nil="NIL"
const_stdin="STDIN"
const_stdout="STDOUT"
const_stderr="STDERR"
const_env="ENV"
const_data="DATA"

snippet_1eq1=" 1=1"
snippet_dollar=" $1"
snippet_at=" @a"
snippet_symbol=" :a"
snippet_array=" [1,2]"
snippet_block=" 1.times{|x| x}"
snippet_multi=" 1*1"

string_single_q=" 'a'"
string_dbl_q=" \"a\""
